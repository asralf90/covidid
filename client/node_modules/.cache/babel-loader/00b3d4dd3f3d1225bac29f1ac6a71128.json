{"ast":null,"code":"var _jsxFileName = \"/Users/danial_asraf/Desktop/covidid/client/src/components/QRcode.jsx\";\nimport React, { useState, useMemo } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport { v4 as uuid } from \"uuid\";\nimport QRCode from \"qrcode.react\"; // import generator from \"generate-password\";\n\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return /*#__PURE__*/React.createElement(MuiAlert, Object.assign({\n    elevation: 6,\n    variant: \"filled\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }));\n}\n\nexport default function QRGenerator({\n  password\n}) {\n  //const adminId = uuid();\n  //const [adminId] = useState(uuid());\n  const adminId = useMemo(() => uuid(), []); // const password = useMemo(\n  //   () =>\n  //     generator.generate({\n  //       length: 8,\n  //       numbers: true,\n  //     }),\n  //   []\n  // );\n\n  const [qrcode, setQrcode] = useState({\n    value: \"\",\n    copied: false\n  });\n\n  const downloadQR = () => {\n    const canvas = document.getElementById(\"qrc\");\n    const pngUrl = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = password + \".png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const hostname = window.location.hostname;\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  }; // console.log(adminId, password);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"caption\",\n    paragraph: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Password : \", password, /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: password,\n    onCopy: () => setQrcode({ ...qrcode,\n      copied: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FileCopyIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }))), qrcode.copied ? /*#__PURE__*/React.createElement(Snackbar, {\n    open: open,\n    autoHideDuration: 2000,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: handleClose,\n    severity: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Password Copied to Clipboard!\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QRCode, {\n    id: \"qrc\",\n    value: `http://${hostname}/${adminId}`,\n    size: 150,\n    bgColor: \"#fff\",\n    fgColor: \"#45046a\",\n    level: \"H\",\n    includeMargin: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    fullWidth: true,\n    onClick: downloadQR,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GetAppIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), \" Download QR Code - User Form URL\")));\n}","map":{"version":3,"sources":["/Users/danial_asraf/Desktop/covidid/client/src/components/QRcode.jsx"],"names":["React","useState","useMemo","Typography","Button","FileCopyIcon","GetAppIcon","v4","uuid","QRCode","CopyToClipboard","Snackbar","MuiAlert","Alert","props","QRGenerator","password","adminId","qrcode","setQrcode","value","copied","downloadQR","canvas","document","getElementById","pngUrl","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","hostname","window","location","open","setOpen","handleClick","handleClose","event","reason","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport { v4 as uuid } from \"uuid\";\nimport QRCode from \"qrcode.react\";\n// import generator from \"generate-password\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function QRGenerator({ password }) {\n  //const adminId = uuid();\n  //const [adminId] = useState(uuid());\n  const adminId = useMemo(() => uuid(), []);\n  // const password = useMemo(\n  //   () =>\n  //     generator.generate({\n  //       length: 8,\n  //       numbers: true,\n  //     }),\n  //   []\n  // );\n\n  const [qrcode, setQrcode] = useState({\n    value: \"\",\n    copied: false,\n  });\n\n  const downloadQR = () => {\n    const canvas = document.getElementById(\"qrc\");\n    const pngUrl = canvas\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = password + \".png\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  };\n\n  const hostname = window.location.hostname;\n\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  // console.log(adminId, password);\n\n  return (\n    <div>\n      <Typography align=\"center\" variant=\"caption\" paragraph=\"true\">\n        Password : {password}\n        <CopyToClipboard\n          text={password}\n          onCopy={() => setQrcode({ ...qrcode, copied: true })}\n        >\n          <Button onClick={handleClick}>\n            <FileCopyIcon />\n          </Button>\n        </CopyToClipboard>\n        {/* {qrcode.copied ? <span style={{ color: \"red\" }}> Copied.</span> : null} */}\n        {qrcode.copied ? (\n          <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"success\">\n              Password Copied to Clipboard!\n            </Alert>\n          </Snackbar>\n        ) : null}\n      </Typography>\n      <div style={{ textAlign: \"center\" }}>\n        <QRCode\n          id=\"qrc\"\n          value={`http://${hostname}/${adminId}`}\n          size={150}\n          bgColor={\"#fff\"}\n          fgColor={\"#45046a\"}\n          level={\"H\"}\n          includeMargin={false}\n        />\n        <Button fullWidth onClick={downloadQR}>\n          <GetAppIcon /> Download QR Code - User Form URL\n        </Button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}